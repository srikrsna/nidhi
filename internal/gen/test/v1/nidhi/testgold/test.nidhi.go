// Code generated by protoc-gen-nidhi. DO NOT EDIT.
//
// Source: test/v1/test.proto

package test

import (
	context "context"
	sql "database/sql"
	json "encoding/json"
	"strconv"

	_go "github.com/json-iterator/go"
	nidhi "github.com/srikrsna/nidhi"
	v1 "github.com/srikrsna/nidhi/internal/gen/test/v1"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

// Store is a [nidhi.Store] for Test.
type Store = nidhi.Store[v1.Test]

// NewStore is a document store for Test
func NewStore(
	ctx context.Context,
	db *sql.DB,
	opt nidhi.StoreOptions,
) (*Store, error) {
	return nidhi.NewStore(
		ctx,
		db,
		"test_v1",
		"test",
		[]string{
			"id",
			"title",
			"subTest",
			"subTests",
			"m",
		},
		func(x *v1.Test) string { return x.Id },
		func(x *v1.Test, id string) { x.Id = id },
		opt,
	)
}

// Updates is a Test type with every field as optional.
//
// It can be used for partial updates using
// [*nidhi.Store.Update] and [*nidhi.Store.UpdateMany].
type Updates struct {
	Title    *string            `json:"title,omitempty"`
	SubTest  **v1.SubTest       `json:"subTest,omitempty"`
	SubTests *[]*v1.SubTest     `json:"subTests,omitempty"`
	M        *map[string]string `json:"m,omitempty"`
}

var schema = newTestField(nil)

var (
	Id = schema.Id
	Title = schema.Title
	SubTest = schema.SubTest
	SubTests = schema.SubTests
	M = schema.M
)

type testField struct {
	nidhi.DocField[*v1.Test]
	Id       nidhi.StringField
	Title    nidhi.StringField
	SubTest  subTestField
	SubTests nidhi.ListField[*v1.SubTest, []*v1.SubTest, subTestField]
	M        nidhi.DocField[map[string]string]
}

func newTestField(path []string) testField {
	return testField{
		nidhi.NewDocField[*v1.Test](path),
		nidhi.NewStringField(append(path, "id")),
		nidhi.NewStringField(append(path, "title")),
		newSubTestField(append(path, "subTest")),
		nidhi.NewListField[*v1.SubTest, []*v1.SubTest](append(path, "subTests"), func(i int) subTestField {
			return newSubTestField(append(path, "subTests", strconv.Itoa(i)))
		}),
		nidhi.NewDocField[map[string]string](append(path, "m")),
	}
}

type subTestField struct {
	nidhi.DocField[*v1.SubTest]
	Name  nidhi.StringField
	Inner subTest_InnerTestField
}

func newSubTestField(path []string) subTestField {
	return subTestField{
		nidhi.NewDocField[*v1.SubTest](path),
		nidhi.NewStringField(append(path, "name")),
		newSubTest_InnerTestField(append(path, "inner")),
	}
}

type subTest_InnerTestField struct {
	nidhi.DocField[*v1.SubTest_InnerTest]
	Yes nidhi.StringField
}

func newSubTest_InnerTestField(path []string) subTest_InnerTestField {
	return subTest_InnerTestField{
		nidhi.NewDocField[*v1.SubTest_InnerTest](path),
		nidhi.NewStringField(append(path, "yes")),
	}
}

func (u *Updates) WriteJSON(w *_go.Stream) {
	if u == nil {
		w.WriteEmptyObject()
		return
	}
	first := true
	w.WriteObjectStart()
	if u.Title != nil {
		if !first {
			w.WriteMore()
		}
		w.WriteObjectField("title")
		w.WriteString(*u.Title)
		first = false
	}
	if u.SubTest != nil {
		if !first {
			w.WriteMore()
		}
		w.WriteObjectField("subTest")
		if m, ok := any(*u.SubTest).(interface{ WriteJSON(*_go.Stream) }); ok {
			m.WriteJSON(w)
		} else {
			data, err := protojson.Marshal(*u.SubTest)
			if err != nil {
				w.Error = err
				return
			}
			w.WriteVal(json.RawMessage(data))
		}
		first = false
	}
	if u.SubTests != nil {
		if !first {
			w.WriteMore()
		}
		w.WriteObjectField("subTests")
		w.WriteArrayStart()
		ap := false
		for _, v := range *u.SubTests {
			if !ap {
				w.WriteMore()
			}
			if m, ok := any(v).(interface{ WriteJSON(*_go.Stream) }); ok {
				m.WriteJSON(w)
			} else {
				data, err := protojson.Marshal(v)
				if err != nil {
					w.Error = err
					return
				}
				w.WriteVal(json.RawMessage(data))
			}
			ap = false
		}
		w.WriteArrayEnd()
		first = false
	}
	if u.M != nil {
		if !first {
			w.WriteMore()
		}
		w.WriteObjectField("m")
		w.WriteObjectStart()
		mp := false
		for k, v := range *u.M {
			if !mp {
				w.WriteMore()
			}
			w.WriteObjectField(k)
			w.WriteString(v)
			mp = false
		}
		w.WriteObjectEnd()
		first = false
	}
	w.WriteObjectEnd()
}
