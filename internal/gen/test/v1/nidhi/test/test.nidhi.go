// Code generated by protoc-gen-nidhi. DO NOT EDIT.
//
// Source: test/v1/test.proto

package test

import (
	context "context"
	sql "database/sql"
	json "encoding/json"
	_go "github.com/json-iterator/go"
	nidhi "github.com/srikrsna/nidhi"
	v1 "github.com/srikrsna/nidhi/internal/gen/test/v1"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

// TestStore is a [nidhi.Store] for Test.
type TestStore = nidhi.Store[v1.Test]

// NewTestStore is a document store for Test
func NewTestStore(
	ctx context.Context,
	db *sql.DB,
	opt nidhi.StoreOptions,
) (*TestStore, error) {
	return nidhi.NewStore(
		ctx,
		db,
		"test_v1",
		"test",
		[]string{
			"id",
			"title",
			"subTest",
			"subTests",
			"m",
		},
		func(x *v1.Test) string { return x.Id },
		func(x *v1.Test, id string) { x.Id = id },
		opt,
	)
}

// Updates is a Test type with every field as optional.
//
// It can be used for partial updates using
// [*nidhi.Store.Update] and [*nidhi.Store.UpdateMany].
type Updates struct {
	Title    *string            `json:"title,omitempty"`
	SubTest  **v1.SubTest       `json:"subTest,omitempty"`
	SubTests *[]*v1.SubTest     `json:"subTests,omitempty"`
	M        *map[string]string `json:"m,omitempty"`
}

var (
	Id = testId{
		nidhi.StringField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.id' RETURNING TEXT DEFAULT '' ON EMPTY)`),
	}
	Title = testTitle{
		nidhi.StringField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.title' RETURNING TEXT DEFAULT '' ON EMPTY)`),
	}
	SubTest = testSubTest{
		nidhi.JsonField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.subTest' RETURNING JSONB DEFAULT '{}' ON EMPTY)`),
		testSubTestName{
			nidhi.StringField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.subTest.name' RETURNING TEXT DEFAULT '' ON EMPTY)`),
		},
		testSubTestInner{
			nidhi.JsonField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.subTest.inner' RETURNING JSONB DEFAULT '{}' ON EMPTY)`),
			testSubTestInnerYes{
				nidhi.StringField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.subTest.inner.yes' RETURNING TEXT DEFAULT '' ON EMPTY)`),
			},
		},
	}
	SubTests = testSubTests{
		nidhi.JsonField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.subTests' RETURNING JSONB DEFAULT '{}' ON EMPTY)`),
		testSubTestsName{
			nidhi.StringSliceField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.subTests[*].name' RETURNING TEXT[] DEFAULT '{}' ON EMPTY)`),
		},
		testSubTestsInner{
			nidhi.JsonField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.subTests[*].inner' RETURNING JSONB DEFAULT '{}' ON EMPTY)`),
			testSubTestsInnerYes{
				nidhi.StringSliceField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.subTests[*].inner.yes' RETURNING TEXT[] DEFAULT '{}' ON EMPTY)`),
			},
		},
	}
	M = testM{
		nidhi.JsonField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.m' RETURNING JSONB DEFAULT '{}' ON EMPTY)`),
		testMKey{
			nidhi.StringField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.m.key' RETURNING TEXT DEFAULT '' ON EMPTY)`),
		},
		testMValue{
			nidhi.StringField(`JSON_VALUE(` + nidhi.ColDoc + `::jsonb, '$.m.value' RETURNING TEXT DEFAULT '' ON EMPTY)`),
		},
	}
)

var (
	Or  = nidhi.Or
	And = nidhi.And
	Not = nidhi.Not
)

type (
	testId struct {
		nidhi.StringField
	}
	testTitle struct {
		nidhi.StringField
	}
	testSubTest struct {
		nidhi.JsonField
		Name  testSubTestName
		Inner testSubTestInner
	}
	testSubTestName struct {
		nidhi.StringField
	}
	testSubTestInner struct {
		nidhi.JsonField
		Yes testSubTestInnerYes
	}
	testSubTestInnerYes struct {
		nidhi.StringField
	}
	testSubTests struct {
		nidhi.JsonField
		Name  testSubTestsName
		Inner testSubTestsInner
	}
	testSubTestsName struct {
		nidhi.StringSliceField
	}
	testSubTestsInner struct {
		nidhi.JsonField
		Yes testSubTestsInnerYes
	}
	testSubTestsInnerYes struct {
		nidhi.StringSliceField
	}
	testM struct {
		nidhi.JsonField
		Key   testMKey
		Value testMValue
	}
	testMKey struct {
		nidhi.StringField
	}
	testMValue struct {
		nidhi.StringField
	}
)

func (u *Updates) WriteJSON(w *_go.Stream) {
	if u == nil {
		w.WriteEmptyObject()
		return
	}
	first := true
	w.WriteObjectStart()
	if u.Title != nil {
		if !first {
			w.WriteMore()
		}
		w.WriteObjectField("title")
		w.WriteString(*u.Title)
		first = false
	}
	if u.SubTest != nil {
		if !first {
			w.WriteMore()
		}
		w.WriteObjectField("subTest")
		if m, ok := any(*u.SubTest).(interface{ WriteJSON(*_go.Stream) }); ok {
			m.WriteJSON(w)
		} else {
			data, err := protojson.Marshal(*u.SubTest)
			if err != nil {
				w.Error = err
				return
			}
			w.WriteVal(json.RawMessage(data))
		}
		first = false
	}
	if u.SubTests != nil {
		if !first {
			w.WriteMore()
		}
		w.WriteObjectField("subTests")
		w.WriteArrayStart()
		ap := false
		for _, v := range *u.SubTests {
			if !ap {
				w.WriteMore()
			}
			if m, ok := any(v).(interface{ WriteJSON(*_go.Stream) }); ok {
				m.WriteJSON(w)
			} else {
				data, err := protojson.Marshal(v)
				if err != nil {
					w.Error = err
					return
				}
				w.WriteVal(json.RawMessage(data))
			}
			ap = false
		}
		w.WriteArrayEnd()
		first = false
	}
	if u.M != nil {
		if !first {
			w.WriteMore()
		}
		w.WriteObjectField("m")
		w.WriteObjectStart()
		mp := false
		for k, v := range *u.M {
			if !mp {
				w.WriteMore()
			}
			w.WriteObjectField(k)
			w.WriteString(v)
			mp = false
		}
		w.WriteObjectEnd()
		first = false
	}
	w.WriteObjectEnd()
}
