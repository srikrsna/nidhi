{{- /*gotype: github.com/srikrsna/pkg/protoc-gen-nidhi.Root*/ -}}
{{ $name := .Message | Name }}
{{ $lowerName := printf "%s%s" "imp_" .Message.Name  }}
func Get{{ $name }}Query() {{ $name }}Query {
	return (*{{ $lowerName }}Query)(nidhi.GetQuery())
}

func Put{{ $name }}Query(q {{ $name }}Query) {
	nidhi.PutQuery((*nidhi.Query)(q.(*{{ $lowerName }}Query)))
}

type {{ $name }}Query interface {
{{- range .Fields -}}
{{- if .Type.ProtoType.IsInt }}
	{{ . | Name }}(*nidhi.IntQuery) {{ $name }}Conj
{{- else if .Type.ProtoType.IsNumeric }}
	{{ . | Name }}(*nidhi.FloatQuery) {{ $name }}Conj
{{- else if . | IsString }}
	{{ . | Name }}(*nidhi.StringQuery) {{ $name }}Conj
{{- else if . | IsBool }}
	{{ . | Name }}(*nidhi.BoolQuery) {{ $name }}Conj
{{- else if . | IsWKT }}
	{{- if . | IsWKTTime }}
	{{ . | Name }}(*nidhi.TimeQuery) {{ $name }}Conj
	{{- else if . | IsWKTDuration }}
	{{ . | Name }}(*nidhi.DurationQuery) {{ $name }}Conj
	{{- else if . | IsWKTAny }}{{- $gtype := . | GoType }}
	{{ . | Name }}({{$gtype.Element}}) {{ $name }}Conj
	{{- end }}
{{- else if .Type.IsRepeated }}{{- $gtype := . | GoType }}
{{- if .Type.Element.IsEmbed }}
	{{- if or (.Type.Element.Embed | IsWKTTime) (.Type.Element.Embed | IsWKTDuration) }}
	{{ . | Name }}(nidhi.SliceOptions, ...{{ $gtype.Element }}) {{ $name }}Conj
	{{- else }}
	{{ . | Name }}( ...{{ $gtype.Element }}) {{ $name }}Conj
	{{ end }}
{{- else }}
	{{ . | Name }}(nidhi.SliceOptions, ...{{ $gtype.Element }}) {{ $name }}Conj
{{- end }}
{{- else if .Type.IsEmbed }}
	{{ . | Name }}() {{ $name }}{{ . | Name }}Query
{{- end }}
{{- end }}

	// Generic With Type Safety
	Paren(iq is{{ $name }}Query) {{ $name }}Conj
	Where(query string, args ...interface{}) {{ $name }}Conj
	WhereMetadata(nidhi.Queryer) {{ $name }}Conj
	Not() {{ $name }}Query
}

type {{ $name }}Conj interface {
	And() {{ $name }}Query
	Or() {{ $name }}Query
	ReplaceArgs(args ...interface{}) ({{ $name }}Conj, error)
	is{{ $name }}Query
}

type is{{ $name }}Query interface {
	{{ $lowerName }}Query()
	nidhi.Sqlizer
}

type {{ $lowerName }}Query nidhi.Query

func (q *{{ $lowerName }}Query) {{ $lowerName }}Query() {}

func (q *{{ $lowerName }}Query) Id(f *nidhi.StringQuery) {{ $name }}Conj {
	(*nidhi.Query)(q).Id(f)
	return q
}

{{- range .Fields -}}
	{{- if .Type.ProtoType.IsInt }}
func (q *{{ $lowerName }}Query) {{ . | Name }}(f *nidhi.IntQuery) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(" ("+nidhi.ColDoc+"->'{{ .Name | LowerCamel }}')::bigint", f)
	return q
}
	{{ else if .Type.ProtoType.IsNumeric }}
func (q *{{ $lowerName }}Query) {{ . | Name }}(f *nidhi.FloatQuery) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(" ("+nidhi.ColDoc+"->'{{ .Name | LowerCamel }}')::double precision", f)
	return q
}
	{{ else if and (. | IsString) (ne .Name.String "id") }}
func (q *{{ $lowerName }}Query) {{ . | Name }}(f *nidhi.StringQuery) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(" "+nidhi.ColDoc+"->>'{{ .Name | LowerCamel }}'", f)
	return q
}
	{{ else if . | IsBool }}
func (q *{{ $lowerName }}Query) {{ . | Name }}(f *nidhi.BoolQuery) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(" ("+nidhi.ColDoc+"->'{{ .Name | LowerCamel }}')::bool", f)
	return q
}
	{{ else if . | IsWKT }}
	{{ if . | IsWKTTime }}
func (q *{{ $lowerName }}Query) {{ . | Name }}(f *nidhi.TimeQuery) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(" ("+nidhi.ColDoc+"->>'{{ .Name | LowerCamel }}')::timestamp", f)
	return q
}
	{{- else if . | IsWKTDuration }}
func (q *{{ $lowerName }}Query) {{ . | Name }}(f *nidhi.DurationQuery) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(" ("+nidhi.ColDoc+"->>'{{ .Name | LowerCamel }}')::bigint", f)
	return q
}
	{{- else if . | IsWKTAny }}{{- $gtype := . | GoType }}
func (q *{{ $lowerName }}Query) {{ . | Name }}(f {{ $gtype }}) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(" ("+nidhi.ColDoc+"->'{{ .Name | LowerCamel }}')", nidhi.MarshalerQuery{nidhigen.ProtoMarshaler{f}})
	return q
}	
	{{ end }}
	{{ else if .Type.IsRepeated }}{{- $gtype := . | GoType }}
{{- if .Type.Element.IsEmbed }}	
{{- if or (.Type.Element.Embed | IsWKTTime) (.Type.Element.Embed | IsWKTDuration) }}
func (q *{{ $lowerName }}Query) {{ . | Name }}(opt nidhi.SliceOptions, arr ...{{ $gtype.Element }}) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(
		" "+nidhi.ColDoc+"->'{{ .Name | LowerCamel }}'",
		&nidhi.SliceQuery{
			Slice: nidhigen.{{ .Type.Element.Embed | Name }}SliceToArgs(arr),
			Options: opt,
		},	
	)
	return q
}
{{- else }}
func (q *{{ $lowerName }}Query) {{ . | Name }}(arr ...{{ $gtype.Element }}) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(
		" "+nidhi.ColDoc+"->'{{ .Name | LowerCamel }}'",
		nidhi.MarshalerQuery{
			Marshaler: {{ $gtype.Element.Value }}Slice(arr),
		},		
	)
	return q
}
{{- end }}
{{- else }}
	func (q *{{ $lowerName }}Query) {{ . | Name }}(opt nidhi.SliceOptions, arr ...{{ $gtype.Element }}) {{ $name }}Conj {
	(*nidhi.Query)(q).Field(
		" "+nidhi.ColDoc+"->'{{ .Name | LowerCamel }}'",		
		&nidhi.SliceQuery{
			Slice: arr,
			Options: opt,
		},		
	)
	return q
}
{{- end }}
	{{ else if .Type.IsEmbed }}
func (q *{{ $lowerName }}Query) {{ . | Name }}() {{ $name }}{{ . | Name }}Query {
	(*nidhi.Query)(q).Prefix(" (" + nidhi.ColDoc + "->'{{ .Name | LowerCamel }}'")
	return (*{{ $lowerName }}{{ . | Name }}Query)(q)
}
	{{- end }}
{{- end }}

func (q *{{ $lowerName }}Query) Paren(iq is{{ $name }}Query) {{ $name }}Conj {
	(*nidhi.Query)(q).Paren(iq)
	return q
}

func (q *{{ $lowerName }}Query) Where(query string, args ...interface{}) {{ $name }}Conj {
	(*nidhi.Query)(q).Where(query, args...)
	return q
}

func (q *{{ $lowerName }}Query) WhereMetadata(f nidhi.Queryer) {{ $name }}Conj {
	(*nidhi.Query)(q).WhereMetadata(f)
	return q
}

func (q *{{ $lowerName }}Query) Not() {{ $name }}Query {
	(*nidhi.Query)(q).Not()
	return q
}

func (q *{{ $lowerName }}Query) And() {{ $name }}Query {
	(*nidhi.Query)(q).And()
	return q
}

func (q *{{ $lowerName }}Query) Or() {{ $name }}Query {
	(*nidhi.Query)(q).Or()
	return q
}

func (q *{{ $lowerName }}Query) ReplaceArgs(args ...interface{}) ({{ $name }}Conj, error) {
	nq, err := (*nidhi.Query)(q).ReplaceArgs(args)
	if err != nil {
		return nil, err
	}
	return (*{{ $lowerName }}Query)(nq), nil
}

func (q *{{ $lowerName }}Query) ToSql() (string, []interface{}, error) {
	return (*nidhi.Query)(q).ToSql()
}