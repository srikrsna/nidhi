
{{- $schemaImp := printf "%s%sImp" (. | Name ) "Schema" }}
type {{ $schemaImp }} struct {
{{- range .Fields -}}
{{- if .Type.IsEmbed }}
    {{- if . | IsWKT }}
    {{ . | Name | LowerCamel }} string
    {{- else }}
	{{ . | Name | LowerCamel }} {{ . | GoType  }}SchemaImp
    {{- end }}
{{- else }}
    {{ . | Name | LowerCamel }} string
{{- end }}
{{- end }}
}

func New{{ . | Name }}Schema(prefix string) *{{ $schemaImp }} {
    return &{{ $schemaImp }} {
{{- range .Fields -}}
{{- if .Type.ProtoType.IsInt }}
	    {{ . | Name | LowerCamel }}: prefix+"->'{{ .Name | LowerCamel }}')::bigint",
{{- else if .Type.ProtoType.IsNumeric }}
	    {{ . | Name | LowerCamel }}: prefix+"->'{{ .Name | LowerCamel }}')::double precision",
{{- else if . | IsString }}
	    {{ . | Name | LowerCamel }}: prefix+"->>'{{ .Name | LowerCamel }}')",
{{- else if . | IsBool }}
	    {{ . | Name | LowerCamel }}: prefix+"->'{{ .Name | LowerCamel }}')::bool",
{{- else if . | IsWKT }}
    {{- if . | IsWKTTime }}
	    {{ . | Name | LowerCamel }}: prefix+"->>'{{ .Name | LowerCamel }}')::timestamp",
    {{- else if . | IsWKTAny }}
        {{ . | Name | LowerCamel }}: prefix+"->'{{ .Name | LowerCamel }}')",
    {{- else if . | IsWKTFieldMask }}
        {{ . | Name | LowerCamel }}: prefix+"->'{{ .Name | LowerCamel }}')",
    {{- end }}
{{- else if .Type.IsRepeated }}{{- $gtype := . | GoType }}
	    {{ . | Name | LowerCamel }}: prefix+"->'{{ .Name | LowerCamel }}')",
{{- else if .Type.IsEmbed }}
	    {{ . | Name | LowerCamel }}: {{ template "prefix" . }}New{{ .Type.Embed | Name }}Schema(prefix+"->'{{ .Name | LowerCamel }}'"),
{{- end }}
{{- end }}
    }
}

{{- range .Fields -}}
 {{- if .Type.ProtoType.IsInt }}
func (s *{{ $schemaImp }}) {{ . | Name }}() nidhigen.IntField {
        return nidhigen.IntField(s.{{ . | Name | LowerCamel }})
}
{{ else if .Type.ProtoType.IsNumeric }}
func (s *{{ $schemaImp }}) {{- . | Name }}() nidhigen.FloatField {
        return nidhigen.FloatField(s.{{ . | Name | LowerCamel }})
}
{{ else if . | IsString }}
func (s *{{ $schemaImp }}) {{ . | Name }}() nidhigen.StringField {
        return nidhigen.StringField(s.{{ . | Name | LowerCamel }})
}
{{ else if . | IsBool }}
func (s *{{ $schemaImp }}) {{ . | Name }}() nidhigen.BoolField {
        return nidhigen.BoolField(s.{{ . | Name | LowerCamel }})
}
{{ else if . | IsWKT }}
    {{- if . | IsWKTTime }}
func (s *{{ $schemaImp }}) {{ . | Name }}() nidhigen.TimeField {
        return nidhigen.TimeField(s.{{ . | Name | LowerCamel }})
}
{{ else if . | IsWKTAny }}
func (s *{{ $schemaImp }}) {{ . | Name }}() nidhigen.UnorderedField {
        return nidhigen.UnorderedField(s.{{ . | Name | LowerCamel }})
}
{{ else if . | IsWKTFieldMask }}
func (s *{{ $schemaImp }}) {{ . | Name }}() nidhigen.UnorderedField {
        return nidhigen.UnorderedField(s.{{ . | Name | LowerCamel }})
}
{{ end }}
{{- else if .Type.IsRepeated }}{{- $gtype := . | GoType }}
func (s *{{ $schemaImp }}) {{ . | Name }}() nidhigen.UnorderedField {
        return nidhigen.UnorderedField(s.{{ . | Name | LowerCamel }})
}
{{ else if .Type.IsEmbed }}
func (s *{{ $schemaImp }}) {{ . | Name }}() {{ . | GoType }}SchemaImp {
        return s.{{ . | Name | LowerCamel }}
}
{{- end }}
{{- end }}


{{ define "prefix" }}{{ if ne (. | ImportPath) (.Type.Embed | ImportPath) }}{{ .Type.Embed | PackageName }}.{{ end }}{{ end }}