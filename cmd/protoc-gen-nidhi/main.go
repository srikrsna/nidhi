package main

import (
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/srikrsna/nidhi/internal/gen/nidhi"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/pluginpb"
)

const (
	generatedFilenameExtension = ".nidhi.go"
	generatedPackageSuffix     = "nidhi"
	nidhiPkg                   = protogen.GoImportPath("github.com/srikrsna/nidhi")
	contextPkg                 = protogen.GoImportPath("context")
	sqlPkg                     = protogen.GoImportPath("database/sql")
)

func main() {
	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, file := range plugin.Files {
			if file.Generate {
				gen(plugin, file)
			}
		}
		return nil
	})
}

func gen(plugin *protogen.Plugin, file *protogen.File) {
	var msgToGen []*protogen.Message
	for _, msg := range file.Messages {
		for _, field := range msg.Fields {
			if proto.GetExtension(field.Desc.Options(), nidhi.E_DocumentId).(bool) {
				msgToGen = append(msgToGen, msg)
			}
		}
	}
	if len(msgToGen) == 0 {
		return
	}
	file.GoPackageName += generatedPackageSuffix
	dir := filepath.Dir(file.GeneratedFilenamePrefix)
	base := filepath.Base(file.GeneratedFilenamePrefix)
	file.GeneratedFilenamePrefix = filepath.Join(
		dir,
		string(file.GoPackageName),
		base,
	)
	genFile := plugin.NewGeneratedFile(
		file.GeneratedFilenamePrefix+generatedFilenameExtension,
		protogen.GoImportPath(path.Join(
			string(file.GoImportPath),
			string(file.GoPackageName),
		)),
	)
	genHeader(genFile, file)
	for _, msg := range msgToGen {
		genMsg(genFile, msg)
	}
}

func genHeader(g *protogen.GeneratedFile, file *protogen.File) {
	g.P("// Code generated by ", filepath.Base(os.Args[0]), ". DO NOT EDIT.")
	g.P("//")
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("//", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// Source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
}

func genMsg(g *protogen.GeneratedFile, msg *protogen.Message) {
	var idField *protogen.Field
	for _, field := range msg.Fields {
		if field.Oneof != nil {
			continue
		}
		if proto.GetExtension(field.Desc.Options(), nidhi.E_DocumentId).(bool) {
			idField = field
			break
		}
	}
	if idField == nil {
		panic("should not be possible")
	}
	g.P("// New", msg.GoIdent.GoName, "Store is a document store for ", msg.GoIdent.GoName)
	g.P("func New", msg.GoIdent.GoName, "Store(")
	g.P("ctx ", contextPkg.Ident("Context"), ",")
	g.P("db *", sqlPkg.Ident("DB"), ",")
	g.P("opt ", nidhiPkg.Ident("StoreOptions"), ",")
	g.P(") (*", nidhiPkg.Ident("Store"), "[", msg.GoIdent, ", ", nidhiPkg.Ident("Sqlizer"), "], error) {")
	g.P("return ", nidhiPkg.Ident("NewStore"), "[", msg.GoIdent, ", ", nidhiPkg.Ident("Sqlizer"), "] (")
	g.P("ctx,")
	g.P("db,")
	g.P(`"`, strings.ReplaceAll(string(msg.Desc.ParentFile().Package()), ".", "_"), `",`)
	g.P(`"`, strings.ToLower(msg.GoIdent.GoName), `",`)
	g.P("[]string{")
	for _, field := range msg.Fields {
		g.P(`"`, field.Desc.JSONName(), `",`)
	}
	g.P("},")
	g.P("func(x *", msg.GoIdent, ") string { return x.", idField.GoName, " },")
	g.P("func(x *", msg.GoIdent, ", id string) {x.", idField.GoName, " = id },")
	g.P("opt,")
	g.P(")")
	g.P("}")
}
